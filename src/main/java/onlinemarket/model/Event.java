package onlinemarket.model;
// default package
// Generated Jan 2, 2018 4:57:38 PM by Hibernate Tools 4.3.5.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Event generated by hbm2java
 */
@Entity
@Table(name = "tb_event", schema = "dbo", catalog = "SmartMarket")
public class Event implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer id;
	private int publisherId;
	private String name;
	private String content;
	private byte status;
	private Byte percentValue;
	private BigDecimal value;
	private String code;
	private Date createDate;
	private Date updateDate;
	private Date dateFrom;
	private Date dateTo;
	private BigDecimal maxPrice;
	private BigDecimal minPrice;
	private Set<Order> orders = new HashSet<Order>(0);
	private Set<Product> products = new HashSet<Product>(0);
	private Set<ProductCategory> productCategories = new HashSet<ProductCategory>(0);
	private Set<Brand> brands = new HashSet<Brand>(0);

	public Event() {
	}

	public Event(int publisherId, String name, byte status, Date createDate, Date dateFrom, Date dateTo,
			BigDecimal maxPrice, BigDecimal minPrice) {
		this.publisherId = publisherId;
		this.name = name;
		this.status = status;
		this.createDate = createDate;
		this.dateFrom = dateFrom;
		this.dateTo = dateTo;
		this.maxPrice = maxPrice;
		this.minPrice = minPrice;
	}

	public Event(int publisherId, String name, String content, byte status, Byte percentValue,
			BigDecimal value, String code, Date createDate, Date updateDate, Date dateFrom, Date dateTo,
			BigDecimal maxPrice, BigDecimal minPrice, Set<Order> orders, Set<Product> products,
			Set<ProductCategory> productCategories, Set<Brand> brands) {
		this.publisherId = publisherId;
		this.name = name;
		this.content = content;
		this.status = status;
		this.percentValue = percentValue;
		this.value = value;
		this.code = code;
		this.createDate = createDate;
		this.updateDate = updateDate;
		this.dateFrom = dateFrom;
		this.dateTo = dateTo;
		this.maxPrice = maxPrice;
		this.minPrice = minPrice;
		this.orders = orders;
		this.products = products;
		this.productCategories = productCategories;
		this.brands = brands;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "_id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "publisher_id", nullable = false)
	public int getPublisherId() {
		return this.publisherId;
	}

	public void setPublisherId(int publisherId) {
		this.publisherId = publisherId;
	}

	@Column(name = "[name]", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "content")
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name = "[status]", nullable = false)
	public byte getStatus() {
		return this.status;
	}

	public void setStatus(byte status) {
		this.status = status;
	}

	@Column(name = "percent_value")
	public Byte getPercentValue() {
		return this.percentValue;
	}

	public void setPercentValue(Byte percentValue) {
		this.percentValue = percentValue;
	}

	@Column(name = "value", precision = 13, scale = 6)
	public BigDecimal getValue() {
		return this.value;
	}

	public void setValue(BigDecimal value) {
		this.value = value;
	}

	@Column(name = "code", length = 32)
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", nullable = false, length = 23)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_date", length = 23)
	public Date getUpdateDate() {
		return this.updateDate;
	}

	public void setUpdateDate(Date updateDate) {
		this.updateDate = updateDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_from", nullable = false, length = 23)
	public Date getDateFrom() {
		return this.dateFrom;
	}

	public void setDateFrom(Date dateFrom) {
		this.dateFrom = dateFrom;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_to", nullable = false, length = 23)
	public Date getDateTo() {
		return this.dateTo;
	}

	public void setDateTo(Date dateTo) {
		this.dateTo = dateTo;
	}

	@Column(name = "max_price", nullable = false, precision = 13, scale = 6)
	public BigDecimal getMaxPrice() {
		return this.maxPrice;
	}

	public void setMaxPrice(BigDecimal maxPrice) {
		this.maxPrice = maxPrice;
	}

	@Column(name = "min_price", nullable = false, precision = 13, scale = 6)
	public BigDecimal getMinPrice() {
		return this.minPrice;
	}

	public void setMinPrice(BigDecimal minPrice) {
		this.minPrice = minPrice;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "tb_event_order", schema = "dbo", catalog = "SmartMarket", joinColumns = {
			@JoinColumn(name = "event_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "order_id", nullable = false, updatable = false) })
	public Set<Order> getOrders() {
		return this.orders;
	}

	public void setOrders(Set<Order> orders) {
		this.orders = orders;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "tb_event_product", schema = "dbo", catalog = "SmartMarket", joinColumns = {
			@JoinColumn(name = "event_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "product_id", nullable = false, updatable = false) })
	public Set<Product> getProducts() {
		return this.products;
	}

	public void setProducts(Set<Product> products) {
		this.products = products;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "tb_event_category", schema = "dbo", catalog = "SmartMarket", joinColumns = {
			@JoinColumn(name = "event_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "product_category_id", nullable = false, updatable = false) })
	public Set<ProductCategory> getProductCategories() {
		return this.productCategories;
	}

	public void setProductCategories(Set<ProductCategory> productCategories) {
		this.productCategories = productCategories;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "tb_event_brand", schema = "dbo", catalog = "SmartMarket", joinColumns = {
			@JoinColumn(name = "event_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "brand_id", nullable = false, updatable = false) })
	public Set<Brand> getBrands() {
		return this.brands;
	}

	public void setBrands(Set<Brand> brands) {
		this.brands = brands;
	}

}
